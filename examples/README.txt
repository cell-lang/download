This directory contains a few example Cell projects to get you started. To build
a project, just cd into the corresponding directory and type make. The projects
only build on Linux, and you'll need g++ installed. The project.txt contains the
list of Cell source code files you want to include in your project. Here's a
description of the available examples:

send-msg:
  This example project is described in the "Using automata" section of the Cell
  website. It creates an instance of a static automaton, loads its initial state
  from a file, reads a list of messages from another, sends all the messages to
  the automaton instance and writes the final state to a third file. It uses the
  Counter automaton described in the online documentation, but you can easily
  replace it with your own static automaton. Once you've built the executable,
  you can run it with the provided sample data like this:

    ./send-msgs init-state.txt msg-list.txt final-state.txt

  After that, the file final-state.txt will contain the final state of the
  automaton.

water-sensor:
  Another example project taken from the "Using automata" section of the online
  documentation. It shows how to define, create and control a reactive automaton.

chat-server:
  This example shows how to use from C++ the class generated by the Cell
  compiler for a static automaton. The file logins.cell contains the definition
  of the Logins automaton described in the online documentation, and main.cpp
  contains the C++ code that creates and uses it. Note that here the generated
  class is used directly, which is not the recommended style. You should be
  creating a wrapper class instead.

water-sensor-mixed:
  This example does the same thing as water-sensor, but it's a mixed language
  application. It demonstrates how to use from C++ the class generated by the
  compiler for a reactive automaton, and how to create a wrapper class for it.
