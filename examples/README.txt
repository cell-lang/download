This directory contains a few example Cell projects to get you started. Each
project can be built using any of the available code generators (C++, Java
and C#), save for social-network-mixed which only supports Java and C#.

To build a project using C++, just cd into the corresponding directory and type
make. The projects only build on Linux, and you'll need g++ installed.

For Java, you'll need Java 8, and it will run on any platform supported by it.
Choose the build target that ends with '.jar'

For C# on Linux, you'll need to install the Mono compiler. Choose the build
target that ends with '.exe'. The C# targets should build also on other
operating systems, but if you build them on Windows, you'll have to replace
every use of the Mono compiler ('mcs.exe') with the Microsoft one ('csc.exe')
in the makefile.

The project.txt file in each directory contains the list of Cell source code
files that are included in the project. Here's a description of the available
examples:


send-msg:
  This example project is described in the "Using automata" section of the Cell
  website. It creates an instance of a relational automaton, loads its initial
  state from a file, reads a list of messages from another, sends all the
  messages to the automaton instance and writes the final state to a third file.
  It uses the Counter automaton described in the online documentation, but you
  can easily replace it with your own relational automaton. Once you've built
  the executable, you can run it with the provided sample data like this:

    ./send-msgs init-state.txt msg-list.txt final-state.txt

  After that, the file final-state.txt will contain the final state of the
  automaton.

water-sensor:
  Another example project taken from the "Using automata" section of the online
  documentation. It shows how to define, create and control a reactive automaton.

social-network:
  This is the code for the SocialNetwork automaton described in the introductory
  example. The application creates an instance of it, populates it with data,
  and then deletes some of it. It also prints the state of the automaton at
  various stages during this process.

chat-server:
  This example shows how to use from C++/Java/C# the class generated by the Cell
  compiler for a relational automaton. The file logins.cell contains the
  definition of the Logins automaton described in the online documentation, and
  main.cpp/main.java/main.cs contain the C++/Java/C# code that creates and uses
  it.

water-sensor-mixed:
  This example does the same thing as water-sensor, but it's a mixed language
  application. It demonstrates how to use the class generated by the compiler
  for a reactive automaton, and how to create a wrapper class for it.

social-network-mixed:
  A mixed language program that loads an initial state for the SocialNetwork
  automaton from a file, sends it a message, and prints the final state to a
  second file.
