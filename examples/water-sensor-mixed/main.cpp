#include <iostream>
#include "generated.h"

using std::string;
using std::get;
using std::cout;
using std::endl;


// Wrapper for the class generated by the compiler
class WaterSensor {
public:
  class Observer {
  public:
    virtual void on_state_change(const char *new_state) = 0;
  };

  WaterSensor() {
    target.apply();
  }

  void failed_reading() {
    target.set_input(generated::WaterSensor::RAW_READING, "nothing");
  }

  void new_reading(bool value) {
    target.set_input(generated::WaterSensor::RAW_READING, value ? "just(true)" : "just(false)");
  }

  void apply(int elapsed_secs, Observer &observer) {
    bool done;
    target.set_elapsed_secs(elapsed_secs);
    do {
      done = target.apply();
      int count = target.changed_outputs_count();
      for (int i=0 ; i < count ; i++) {
        auto id = target.changed_output_id(i);
        char value[256];
        target.read_output(id, value, 256);
        switch (id) {
          case generated::WaterSensor::SENSOR_STATE:
            observer.on_state_change(value);
        }
      }
    } while (!done);
  }

private:
  generated::WaterSensor target;
};


class Writer : public WaterSensor::Observer {
  void on_state_change(const char *new_value) {
    cout << new_value << endl;
  }
};


int main(int argc, char **argv) {
  Writer writer;
  WaterSensor sensor;

  sensor.new_reading(false);
  sensor.apply(40, writer);

  sensor.failed_reading();
  sensor.apply(10, writer);

  sensor.failed_reading();
  sensor.apply(10, writer);

  sensor.failed_reading();
  sensor.apply(10, writer);

  sensor.new_reading(true);
  sensor.apply(10, writer);

  sensor.new_reading(false);
  sensor.apply(50, writer);
}
