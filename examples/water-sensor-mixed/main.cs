using System;
using CellLang;


// Wrapper for the class generated by the compiler
class WaterSensor {
  public interface Observer {
    void OnStateChange(string newState);
  };

  Generated.WaterSensor target = new Generated.WaterSensor();

  public WaterSensor() {
    target.Apply();
  }

  public void FailedReading() {
    target.SetInput(Generated.WaterSensor.Input.RAW_READING, "nothing");
  }

  public void NewReading(bool value) {
    target.SetInput(Generated.WaterSensor.Input.RAW_READING, value ? "just(true)" : "just(false)");
  }

  public void Apply(int elapsedSecs, Observer observer) {
    bool done;
    target.SetElapsedSecs(elapsedSecs);
    do {
      done = target.Apply();
      foreach (var id in target.ChangedOutputs) {
        Value value = target.ReadOutput(id);
        switch (id) {
          case Generated.WaterSensor.Output.SENSOR_STATE:
            observer.OnStateChange(value.ToString());
            break;
        }
      }
    } while (!done);
  }
};


class Writer : WaterSensor.Observer {
  public void OnStateChange(string newValue) {
    Console.WriteLine(newValue.ToString());
  }
};


static class Test {
  public static void Main(string[] args) {
    Writer writer = new Writer();
    WaterSensor sensor = new WaterSensor();

    sensor.NewReading(false);
    sensor.Apply(40, writer);

    sensor.FailedReading();
    sensor.Apply(10, writer);

    sensor.FailedReading();
    sensor.Apply(10, writer);

    sensor.FailedReading();
    sensor.Apply(10, writer);

    sensor.NewReading(true);
    sensor.Apply(10, writer);

    sensor.NewReading(false);
    sensor.Apply(50, writer);
  }
}
